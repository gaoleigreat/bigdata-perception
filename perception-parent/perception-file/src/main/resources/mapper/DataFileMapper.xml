<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lego.perception.file.mapper.DataFileMapper">

    <sql id="find_columns">
		id as id,
		name as name,
		file_type as fileType,
		 project_id as project_id,
		file_url as file_url,
		previewUrl as preview_url,
		remark as remark,
		tags as tags,
		creation_date as creationDate,
		created_by as createdBy,
		last_update_date as lastUpdateDate,
		last_updated_by as lastUpdatedBy
	</sql>


    <sql id="condition">
        <if test='id != null'>
            and id = #{id, jdbcType=BIGINT}
        </if>
        <if test='code != null and code != ""'>
            and name = #{name, jdbcType=VARCHAR}
        </if>

        <if test='type != null and code != ""'>
            and file_type = #{fileType, jdbcType=VARCHAR}
        </if>
        <if test='projectId != null and parentCode != ""'>
            and project_id = #{projectId, jdbcType=BIGINT}
        </if>
        <if test='fileUrl != null and parentCode != ""'>
            and file_url = #{fileUrl, jdbcType=VARCHAR}
        </if>
        <if test='previewUrl != null and parentCode != ""'>
            and preview_url = #{previewUrl, jdbcType=VARCHAR}
        </if>
        <if test="deleteFlag != null">
            and delete_flag = #{deleteFlag, jdbcType=INTEGER}
        </if>
        <if test="remark!=null">
            and remark=#{remark,jdbcType=VARCHAR}
        </if>
        <if test="tag!=null">
            and find_in_set(#{tags,jdbcType=VARCHAR},tags)
        </if>

    </sql>


    <select id="findList" parameterType="com.lego.framework.system.model.entity.DataFile"
            resultType="com.lego.framework.system.model.entity.DataFile">
        select
        <include refid="find_columns"></include>
        from tpl_data_file
        <where>
            <include refid="condition"></include>
        </where>
    </select>

    <insert id="insertList">
        insert into tpl_data_file
        (id, 'name',
        file_type,
        project_id,
        file_url,
        preview_url,
        remark,
        tags
        creation_date,
        created_by,
        last_updated_by)
        values
        <foreach collection="list" item="item" separator=",">
            (
            #{item.id, jdbcType=BIGINT},
            #{item.name, jdbcType=VARCHAR},
            #{item.fileType, jdbcType=VARCHAR},
            #{item.projectId, jdbcType=BIGINT},
            #{item.fileUrl, jdbcType=VARCHAR},
            #{item.previewUrl, jdbcType=VARCHAR},
            #{item.remark, jdbcType=VARCHAR},
            #{item.tags, jdbcType=VARCHAR},
            #{item.creationDate, jdbcType=TIMESTAMP},
            #{item.createdBy, jdbcType=VARCHAR},
            #{item.lastUpdatedBy, jdbcType=TIMESTAMP}
            )
        </foreach>
    </insert>


    <update id="updateList">
        <foreach collection="list" item="item">
            update tpl_data_file
            <set>
                id = #{item.id, jdbcType=BIGINT},
                'name' = #{item.name, jdbcType=VARCHAR},
                file_type= #{item.fileType, jdbcType=VARCHAR},
                project_id = #{item.projectId, jdbcType=BIGINT},
                file_url = #{item.fileUrl, jdbcType=VARCHAR},
                preview_url = #{item.previewUrl, jdbcType=VARCHAR},
                remark = #{item.remark, jdbcType=VARCHAR},
                tags = #{item.tags, jdbcType=VARCHAR},
                last_updated_by = #{item.lastUpdatedBy, jdbcType=VARCHAR}

            </set>
            where id = #{item.id, jdbcType=BIGINT};
        </foreach>
    </update>


    <update id="deleteList">
        update tpl_data_file set delete_flag = 2
        where id in
        <foreach collection="list" item="item" separator="," open="(" close=")" index="index">
            #{item, jdbcType=BIGINT}
        </foreach>
    </update>


    <select id="queryList" resultType="com.lego.framework.system.model.entity.DataFile">
        SELECT
        <include refid="find_columns"/>
        from
        tpl_data_file
        <include refid="condition"/>
        <where>
            ${ew.sqlSegment}
        </where>
    </select>
</mapper>
