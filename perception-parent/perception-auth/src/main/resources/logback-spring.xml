<?xml version="1.0" encoding="UTF-8"?>
<!--configuration节点，scan为true是配置文件发生改变时重新加载，scanPeriod为扫描的周期，debug表示是否打印logback内部的日志信息，查看logback状态 -->
<configuration scan="true" scanPeriod="120 seconds" debug="false">
    <!-- 定义变量name：变量名，value：变量值，可以通过${}使用值 -->
    <!--<property name="appName" value="auth-service"/>
    <property name="logDir" value="auth-service"/>-->

    <springProperty scope="context" name="logDir" source="spring.application.name" defaultValue="auth-service"/>

    <springProperty scope="context" name="maxHistory" source="logging.maxHistory" defaultValue="2400"/>

    <!-- 日志上下文名称 -->
    <contextName>${logDir}</contextName>

    <!-- 定义timestamp变量 key变量名称，datePattern时间格式 -->
    <timestamp key="timestamp" datePattern="yyyy-MM-dd HH:mm:ss"/>

    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%d{yyyy-MM-dd HH:mm:ss}\t[%thread]\t[%-5level]\t[%logger{50}]%msg%n</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
    </appender>

    <appender name="error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>/home/work/logs/${logDir}/error_log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>/home/work/logs/${logDir}/error_log_%d{yyyyMMdd.HH}</fileNamePattern>
            <maxHistory>${maxHistory}</maxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%d{yyyy-MM-dd HH:mm:ss}\t[%thread]\t[%-5level]\t[%logger{50}]%msg%n</pattern>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
    </appender>

    <appender name="access" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>/home/work/logs/${logDir}/access_log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>/home/work/logs/${logDir}/access_log_%d{yyyyMMdd.HH}</fileNamePattern>
            <maxHistory>${maxHistory}</maxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%msg%n</pattern>
        </encoder>
        <filter class="com.lego.survey.lib.log.filter.AccessLogFilter" />
    </appender>

    <appender name="service" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>/home/work/logs/${logDir}/service_log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>/home/work/logs/${logDir}/service_log_%d{yyyyMMdd.HH}</fileNamePattern>
            <maxHistory>${maxHistory}</maxHistory>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%msg%n</pattern>
        </encoder>
        <filter class="com.lego.survey.lib.log.filter.ServiceLogFilter" />
    </appender>


    <springProfile name="!prod">
        <!-- 当 "生产" 环境时，该配置不激活-->
        <logger name="com.lego.perception" level="DEBUG"/>
        <logger name="org.springframework.data.mongodb.core" level="DEBUG"/>
    </springProfile>


    <!-- 异步输出 -->
    <appender name="async-console" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>256</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="console"/>
    </appender>

    <appender name="async-error" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>256</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="error"/>
    </appender>

    <appender name="async-access" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>256</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="access"/>
    </appender>

    <appender name="async-service" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>256</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="service"/>
    </appender>


    <logger name="async-access">
        <appender-ref ref="async-access"/>
    </logger>
    <logger name="async-service">
        <appender-ref ref="async-service"/>
    </logger>

    <root level="INFO">
        <appender-ref ref="async-console"/>
        <appender-ref ref="async-error"/>
    </root>

    <jmxConfigurator/>
</configuration>